from aiogram import Router, types
from aiogram.filters import Command
from app.keyboards.inline import role_keyboard, cancel_button_trunk, approval_keyboard, manager_menu, seamstress_menu, cutter_menu, controller_menu
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from app.states import RegistrationStates, RemakeRequest
from app.handlers import manager
from app.bot import bot
from app import db

router = Router()
'''
@router.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=role_keyboard()
    )

'''
async def delete_message_reply_markup(message: types.Message):
    await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
            reply_markup=None)
    
@router.message(Command('start'))
async def cmd_start(message: types.Message):
    async with db.execute(
        "SELECT job, status FROM employees WHERE tg_id = ?", 
        (message.from_user.id,)
    ) as cursor:
        user = await cursor.fetchone()
    
    if user:
        job, status = user
        if status != 'approved':
            await message.answer("‚è≥ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            return
        menu_function = await get_menu_function(job)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=menu_function())
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
            reply_markup=role_keyboard()
        )

@router.message(Command('testdb'))
async def test_db(message: types.Message):
    try:
        async with db.execute("SELECT name FROM sqlite_master WHERE type='table'") as cursor:
            tables = await db.fetchall(cursor)
        await message.answer(f"–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {', '.join([t[0] for t in tables])}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('role_'))
async def process_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split('_')[1]
    await state.update_data(job=role)
    await state.set_state(RegistrationStates.waiting_for_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await callback.answer()

@router.message(RegistrationStates.waiting_for_name)
async def process_registration_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    try:
        data = await state.get_data()
        user_id = message.from_user.id

        async with db.execute(
            """INSERT INTO employees (name, job, tg_id, status)
            VALUES (?, ?, ?, 'pending')""",
            (data['name'], data['job'], user_id)
        ) as cursor:
            await db.fetchall(cursor)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        from app.credentials import MANAGERS_ID
        if MANAGERS_ID:
            manager_id = MANAGERS_ID[0]
            await bot.send_message(
                chat_id=manager_id,
                text=f"‚ö†Ô∏è –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n\n"
                     f"ID: {user_id}\n"
                     f"–ò–º—è: {data['name']}\n"
                     f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['job']}\n\n"
                     f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
                reply_markup=approval_keyboard(user_id)
            )

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.clear()

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith('approve_user_'))
async def approve_user(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[-1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute(
            "UPDATE employees SET status = 'approved' WHERE tg_id = ?",
            (user_id,)
        ) as cursor:
            await db.fetchall(cursor)
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            reply_markup=manager_menu()
        )

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute(
            "SELECT job FROM employees WHERE tg_id = ?",
            (user_id,)
        ) as cursor:
            job = (await cursor.fetchone())[0]
            menu_func = await get_menu_function(job)
            await bot.send_message(
                chat_id=user_id,
                text="üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
                reply_markup=menu_func()
            )

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith('reject_user_'))
async def reject_user(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[-1])
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute(
            "DELETE FROM employees WHERE tg_id = ?",
            (user_id,)
        ) as cursor:
            await db.fetchall(cursor)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await callback.message.edit_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            reply_markup=None
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await manager.show_manager_menu(callback)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

async def get_menu_function(job: str):
    menu_keyboards = {
        'manager': manager_menu,
        'seamstress': seamstress_menu,
        'cutter': cutter_menu,
        'controller': controller_menu
    }
    return menu_keyboards.get(job)

@router.callback_query(lambda c: c.data == "repair")
async def request_remake(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        async with db.execute(
            "SELECT job FROM employees WHERE tg_id = ?",
            (callback.from_user.id,)
        ) as cursor:
            job_data = await cursor.fetchone()
        
        if not job_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—é
        menu_func = await get_menu_function(job_data[0])
        menu_keyboard = menu_func()
        await state.update_data(menu_keyboard=menu_keyboard)
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=cancel_button_trunk()
        )
        await state.set_state(RemakeRequest.waiting_for_equipment)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        if job_data:
            menu_func = await get_menu_function(job_data[0])
            menu_keyboard = menu_func()
            await callback.message.answer("–ú–µ–Ω—é:", reply_markup=menu_keyboard)



@router.message(RemakeRequest.waiting_for_equipment)
async def process_remake_equipment(message: types.Message, state: FSMContext):
    await state.update_data(equipment=message.text)
    await delete_message_reply_markup(message)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:",
        reply_markup=cancel_button_trunk()
    )
    await state.set_state(RemakeRequest.waiting_for_description)


@router.message(RemakeRequest.waiting_for_description)
async def process_remake_description(message: types.Message, state: FSMContext):        
    data = await state.get_data()
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Ç–µ–≥–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        safe_description = message.text.replace('<', '&lt;').replace('>', '&gt;')
        await delete_message_reply_markup(message)
        
        async with db.execute(
            """INSERT INTO remakes 
            (equipment_nm, description, applicant_id, remake_status)
            VALUES (?, ?, ?, '—Å–æ–∑–¥–∞–Ω–∞')""",
            (data['equipment'], safe_description, message.from_user.id)
        ) as cursor:
            await db.fetchall(cursor)
            
        await message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∞!", 
            reply_markup=data['menu_keyboard'],
            parse_mode='HTML'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        )
        await state.clear()
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}".replace('<', '&lt;').replace('>', '&gt;')
        await message.answer(
            error_msg,
            parse_mode='HTML',
            reply_markup=data.get('menu_keyboard')
        )
        await state.clear()

@router.callback_query(lambda c: c.data == 'cancel_trunk')
async def cancel_trunk_actions(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    if 'menu_keyboard' in data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:",
            reply_markup=data['menu_keyboard']
        )
        
    await callback.answer()