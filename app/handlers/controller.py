from aiogram import Router, types
from aiogram.fsm.context import FSMContext
import traceback
import logging
from app.states import ControllerStates
from app.keyboards.inline import controller_menu, cancel_button_controller, controller_batch_decision, seamstress_menu
from app import bot
from app import db
from app.services.qr_processing import process_qr_code

logger = logging.getLogger(__name__)

router = Router()

async def show_controller_menu(event):
    if isinstance(event, types.Message):
        await event.answer(
            "–ú–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –û–¢–ö:",
            reply_markup=controller_menu()
        )
    elif isinstance(event, types.CallbackQuery):
        await event.message.edit_text(
            "–ú–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –û–¢–ö:",
            reply_markup=controller_menu()
        )

async def new_controller_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ú–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –û–¢–ö:",
        reply_markup=controller_menu()
    )

@router.callback_query(lambda c: c.data == "controller_data")
async def show_controller_data(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with db.execute(
        """SELECT name, job
        FROM employees 
        WHERE tg_id = ?""",
        (user_id,)
    ) as cursor:
        user_data = await cursor.fetchone()
    
    if user_data:
        name, job = user_data
        await callback.message.edit_text(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {name}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {job}"
        )
        await new_controller_menu(callback)
    else:
        await callback.message.edit_text(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        await new_controller_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'controller_take_batch')
async def take_batch_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ControllerStates.waiting_for_qr)
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –ø–∞—á–∫–∏",
        reply_markup=cancel_button_controller()
    )
    await callback.answer()

@router.message(ControllerStates.waiting_for_qr)
async def process_batch_qr(message: types.Message, state: FSMContext):
    try:
        qr_text = "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å json-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        logger.debug("Received message: %s", message.model_dump_json())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if message.photo:
            photo = message.photo[-1]
        elif message.document and message.document.mime_type.startswith('image/'):
            photo = message.document
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ!")
            return
        
        file = await message.bot.get_file(photo.file_id)
        image_data = await message.bot.download_file(file.file_path)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ bytes
        image_bytes = image_data.getvalue()  
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR
        try:
            qr_text = await process_qr_code(image_bytes)
            print(f"Decoded QR: {qr_text}")
        except Exception as decode_error:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            await message.answer("- –§–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n- QR-–∫–æ–¥ –≤ —Ñ–æ–∫—É—Å–µ\n- –ù–µ—Ç –±–ª–∏–∫–æ–≤")
            raise decode_error
        
        batch_id = int(qr_text)
        
        # –ò—â–µ–º –ø–∞—á–∫—É –≤ –ë–î
        async with db.execute(
            """SELECT batch_id, project_nm, product_nm, color, size, quantity, parts_count, seamstress_id, status
            FROM batches 
            WHERE batch_id = ? """,
            (batch_id,)
        ) as cursor:
            batch_data = await cursor.fetchone()
        
        if not batch_data:
            await message.answer("‚ùå –ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            await show_controller_menu(message)
            return
        
        elif batch_data[8] == '—à—å–µ—Ç—Å—è' or batch_data[8] == '—Å–æ–∑–¥–∞–Ω–∞' or batch_data[8] == '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –Ω–∞—á–∞—Ç–∞':
            await message.answer("‚ùå –ü–∞—á–∫–∞ –µ—â–µ –Ω–µ –ø–æ—à–∏—Ç–∞")
            await state.clear()
            await show_controller_menu(message)
            return
        elif batch_data[8] == '–ø–æ—à–∏—Ç–∞' or batch_data[8] == '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞':

            await state.update_data(batch_data=batch_data)
            await state.set_state(ControllerStates.confirm_batch)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            response = (
                "üîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞—á–∫–∞:\n\n"
                f"ID: {batch_data[0]}\n"
                f"–ü—Ä–æ–µ–∫—Ç: {batch_data[1]}\n"
                f"–ò–∑–¥–µ–ª–∏–µ: {batch_data[2]}\n"
                f"–¶–≤–µ—Ç: {batch_data[3]}\n"
                f"–†–∞–∑–º–µ—Ä: {batch_data[4]}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data[5]}\n"
                f"–î–µ—Ç–∞–ª–µ–π: {batch_data[6]}\n\n"
                "–ü—Ä–∏—Å–≤–æ–∏—Ç—å –ø–∞—á–∫–µ —Å—Ç–∞—Ç—É—Å:"
            )
            
            await message.answer(
                response,
                reply_markup=controller_batch_decision()
            )
        else:
            await message.answer("‚ùå –ü–∞—á–∫–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            await state.clear()
            await show_controller_menu(message)
            return
        
    except Exception as e:
        logger.error("QR processing failed: %s", traceback.format_exc())
        logger.error(f"QR processing failed: {qr_text}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", reply_markup=cancel_button_controller())
        await state.set_state(ControllerStates.waiting_for_qr)
    

@router.callback_query(ControllerStates.confirm_batch)
async def handle_batch_decision(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        batch_id = data.get('batch_data')[0]
        seamstress_id = data.get('batch_data')[7]
        user_id = callback.from_user.id
        msg = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        
        if not batch_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        action = callback.data.split('_')[-1]
    
        if action == "approve":
            async with db.execute(
                """UPDATE batches 
                SET status = '–≥–æ—Ç–æ–≤–æ', 
                    controller_id = ?,
                    control_dttm = CURRENT_TIMESTAMP
                WHERE batch_id = ?""",
                (user_id, batch_id)
            ) as cursor:
                await db.fetchall(cursor)
            msg = "‚úÖ –ü–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!"
            
        elif action == "reject":
            async with db.execute(
                """UPDATE batches 
                SET status = '–Ω–µ–∏—Å–ø—Ä–∞–≤–∏–º—ã–π –±—Ä–∞–∫', 
                    controller_id = ?,
                    control_dttm = CURRENT_TIMESTAMP
                WHERE batch_id = ?""",
                (user_id, batch_id)
            ) as cursor:
                await db.fetchall(cursor)
            msg = "‚ùå –ü–∞—á–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –±—Ä–∞–∫!"
            
        elif action == "remake":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            async with db.execute(
                """UPDATE batches 
                SET status = '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ', 
                    controller_id = ?,
                    control_dttm = CURRENT_TIMESTAMP
                WHERE batch_id = ?""",
                (user_id, batch_id)
            ) as cursor:
                await db.fetchall(cursor)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —à–≤–µ–µ
            if seamstress_id:
                await bot.send_message(
                    chat_id=seamstress_id,
                    text=f"‚ö†Ô∏è –ü–∞—á–∫–∞ {batch_id} —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∫–∏!\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –µ–µ –∏–∑ –∑–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è.",
                    reply_markup=seamstress_menu()
                )
            msg = "üîÑ –ü–∞—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫—É"

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(msg)
        await state.clear()
        await new_controller_menu(callback)
        
    except Exception as e:
        logger.error(f"Batch decision error: {traceback.format_exc()}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        await callback.answer()