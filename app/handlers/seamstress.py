from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from app.services import process_qr_code
from app.states import SeamstressStates
from app.keyboards.inline import seamstress_menu, cancel_button_seamstress, seamstress_batch, seamstress_batches_menu, seamstress_finish_batch
from app import db
import traceback
import logging
import os

router = Router()
logger = logging.getLogger(__name__)


async def show_seamstress_menu(event):
    if isinstance(event, types.Message):
        await event.answer(
            "–ú–µ–Ω—é —à–≤–µ–∏:",
            reply_markup=seamstress_menu()
        )
    elif isinstance(event, types.CallbackQuery):
        await event.message.edit_text(
            "–ú–µ–Ω—é —à–≤–µ–∏:",
            reply_markup=seamstress_menu()
        )

async def new_seamstress_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ú–µ–Ω—é —à–≤–µ–∏:",
        reply_markup=seamstress_menu()
    )

@router.callback_query(lambda c: c.data == 'cancel_seamstress')
async def cancel_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=seamstress_menu()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "seamstress_data")
async def show_seamstress_data(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with db.execute(
        """SELECT name, job
        FROM employees 
        WHERE tg_id = ?""",
        (user_id,)
    ) as cursor:
        user_data = await cursor.fetchone()
    
    if user_data:
        name, job = user_data  # –¢–µ–ø–µ—Ä—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        await callback.message.edit_text(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {name}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {job}"
        )
        await new_seamstress_menu(callback)
    else:
        await callback.message.edit_text(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        await new_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_take_batch')
async def take_batch_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SeamstressStates.waiting_for_qr)
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –ø–∞—á–∫–∏ –∏–ª–∏ id –ø–∞—á–∫–∏",
        reply_markup=cancel_button_seamstress()
    )
    await callback.answer()

@router.message(SeamstressStates.waiting_for_qr)
async def process_batch_qr(message: types.Message, state: FSMContext):
    try:
        logger.debug("Received message: %s", message.model_dump_json())
        batch_id = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –ø–∞—á–∫–∏
        if message.text and message.text.isdigit():
            batch_id = int(message.text)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
            if message.photo:
                photo = message.photo[-1]
            elif message.document and message.document.mime_type.startswith('image/'):
                photo = message.document
            else:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –ø–∞—á–∫–∏")
                return

            file = await message.bot.get_file(photo.file_id)
            image_data = await message.bot.download_file(file.file_path)
            
            try:
                qr_text = await process_qr_code(image_data.read())
                logger.info(f"Decoded QR: {qr_text}")
                batch_id = int(qr_text)
            except Exception as decode_error:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
                await message.answer("- –§–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n- QR-–∫–æ–¥ –≤ —Ñ–æ–∫—É—Å–µ\n- –ù–µ—Ç –±–ª–∏–∫–æ–≤")
                raise decode_error

        # –ü–æ–∏—Å–∫ –ø–∞—á–∫–∏ –≤ –ë–î
        async with db.execute(
            """SELECT batch_id, project_nm, product_nm, color, size, quantity, parts_count, status, seamstress_id
            FROM batches 
            WHERE batch_id = ? AND (status = '—Å–æ–∑–¥–∞–Ω–∞' or status = '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ')""",
            (batch_id,)
        ) as cursor:
            batch_data = await cursor.fetchone()
        
        if not batch_data:
            await message.answer("‚ùå –ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            await state.clear()
            await show_seamstress_menu(message)
            return
        
        if batch_data[7] == '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ' and batch_data[8] != message.from_user.id:
            await message.answer("‚ùå –ü–∞—á–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–æ–π —à–≤–µ–µ–π")
            await state.clear()
            await show_seamstress_menu(message)
            return
            
        await state.update_data(batch_data=batch_data)
        await state.set_state(SeamstressStates.confirm_batch)
        
        response = (
            f"ID: {batch_data[0]}\n"
            f"–ü—Ä–æ–µ–∫—Ç: {batch_data[1]}\n"
            f"–ò–∑–¥–µ–ª–∏–µ: {batch_data[2]}\n"
            f"–¶–≤–µ—Ç: {batch_data[3]}\n"
            f"–†–∞–∑–º–µ—Ä: {batch_data[4]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data[5]}\n"
            f"–î–µ—Ç–∞–ª–µ–π: {batch_data[6]}\n\n"
            "–ü—Ä–∏–Ω—è—Ç—å –ø–∞—á–∫—É –≤ —Ä–∞–±–æ—Ç—É?"
        )
        if batch_data[7] == '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ':
            response = "üîÑ –≠—Ç–æ –≤–∞—à–∞ –ø–∞—á–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ\n\n" + response
        await message.answer( 
            response,
            reply_markup=seamstress_batch()
        )
        
    except ValueError:
        await message.answer("‚ùå ID –ø–∞—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        await state.set_state(SeamstressStates.waiting_for_qr)
    except Exception as e:
        logger.error("Processing failed: %s", traceback.format_exc())
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await state.set_state(SeamstressStates.waiting_for_qr)

@router.callback_query(lambda c: c.data == 'accept_batch', SeamstressStates.confirm_batch)
async def accept_batch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        new_status = '—à—å–µ—Ç—Å—è'

        if data['batch_data'][7] == '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ':
            new_status = '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –Ω–∞—á–∞—Ç–∞'
        
        async with db.execute(
            """UPDATE batches 
            SET seamstress_id = ?, status = ?, sew_start_dttm = CURRENT_TIMESTAMP
            WHERE batch_id = ?""",
            (callback.from_user.id, new_status, data['batch_data'][0])
        ):
            await callback.message.edit_text("‚úÖ –ü–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
            await state.clear()
            await show_seamstress_menu(callback)
            
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data == 'decline_batch', SeamstressStates.confirm_batch)
async def decline_batch(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–∞—á–∫–∏")
    await show_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_batches')
async def show_seamstress_batches(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—á–∫–∏ —à–≤–µ–∏
        async with db.execute(
            """SELECT batch_id, status 
            FROM batches 
            WHERE seamstress_id = ? and (batches.status = '—à—å–µ—Ç—Å—è' or batches.status = '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ' or batches.status = '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –Ω–∞—á–∞—Ç–∞')""",
            (user_id,)
        ) as cursor:
            batches = await cursor.fetchall()
        
        if not batches:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—á–µ–∫")
            await callback.answer()
            await new_seamstress_menu(callback)
            return

        await callback.message.edit_text(
            "üì¶ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—á–∫–∏:",
            reply_markup=seamstress_batches_menu(batches)
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith('seamstress_batch_'))
async def show_batch_details(callback: types.CallbackQuery, state: FSMContext):
    try:
        batch_id = int(callback.data.split('_')[-1])
        
        
        async with db.execute(
            """SELECT batches.batch_id, batches.project_nm, batches.product_nm, batches.color, batches.size, 
                    batches.quantity, batches.parts_count, batches.seamstress_id, batches.created_at, batches.status,
                    employees.name, batches.type
            FROM batches 
            JOIN employees ON batches.cutter_id = employees.tg_id
            WHERE batches.batch_id = ? """,
            (batch_id,)
        ) as cursor:
            batch_data = await cursor.fetchone()

        await state.update_data(batch_data=batch_data)
        if not batch_data:
            await callback.answer("–ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        response = (
            "üîç –î–µ—Ç–∞–ª–∏ –ø–∞—á–∫–∏:\n\n"
            f"ID: {batch_data[0]}\n"
            f"–ü—Ä–æ–µ–∫—Ç: {batch_data[1]}\n"
            f"–ò–∑–¥–µ–ª–∏–µ: {batch_data[2]}\n"
            f"–¶–≤–µ—Ç: {batch_data[3]}\n"
            f"–†–∞–∑–º–µ—Ä: {batch_data[4]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data[5]}\n"
            f"–î–µ—Ç–∞–ª–µ–π: {batch_data[6]}\n"
            f"–†–∞—Å–∫—Ä–æ–π—â–∏–∫: {batch_data[10]}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {batch_data[8]}\n"
            f"–°—Ç–∞—Ç—É—Å: {batch_data[9]}\n"
            f"–¢–∏–ø: {batch_data[11]}\n"
        )
        if batch_data[9] == '–±—Ä–∞–∫ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ':
            response = "üîÑ –ü–∞—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫—É\n\n" + response + "\n\nüì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ id –ø–∞—á–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
            await state.set_state(SeamstressStates.waiting_for_qr)
            await callback.message.edit_text(response, reply_markup=cancel_button_seamstress())
            
        elif batch_data[9] == '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –Ω–∞—á–∞—Ç–∞':
            response = "üîÑ –ü–∞—á–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–µ\n\n" + response
            await callback.message.edit_text(response, reply_markup=seamstress_finish_batch())
        else:
            await callback.message.edit_text(
                response,
                reply_markup=seamstress_finish_batch())
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()
        await new_seamstress_menu(callback)

@router.callback_query(lambda c: c.data == 'seamstress_finish_batch')
async def finish_batch_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        batch_id = data.get('batch_data')[0]
        
        if not batch_id:
            await callback.answer("–û—à–∏–±–∫–∞: ID –ø–∞—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        new_status = '–ø–æ—à–∏—Ç–∞'

        if data.get('batch_data')[9] == '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –Ω–∞—á–∞—Ç–∞':
            new_status = '–ø–µ—Ä–µ–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'

        async with db.execute(
            """UPDATE batches 
            SET status = ?, sew_end_dttm = CURRENT_TIMESTAMP 
            WHERE batch_id = ?""",
            (new_status, batch_id)
        ) as cursor:
            await db.fetchall(cursor)
            
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            "‚úÖ –ü–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
            reply_markup=None
        )
        await new_seamstress_menu(callback)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await new_seamstress_menu(callback)
    finally:
        await callback.answer()
        await state.clear()

@router.callback_query(lambda c: c.data == 'seamstress_cancel_finish_batch')
async def cancel_finish_batch_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await new_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_ok')
async def close_batches_list(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()
    await new_seamstress_menu(callback)

@router.callback_query(lambda c: c.data == 'seamstress_payments')
async def show_seamstress_payments(callback: types.CallbackQuery):
    user_id = callback.from_user.id;
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.execute(
        "SELECT amount, payment_date FROM payments WHERE employee_id = ?",
        (user_id,)
    ) as cursor:
        payments = await cursor.fetchall();
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    async with db.execute(
        "SELECT total_payments, total_pay FROM employee_payment_info WHERE tg_id = ?",
        (user_id,)
    ) as cursor:
        payment_info = await cursor.fetchone();
    total_payments = payment_info['total_payments'] if payment_info else 0;
    total_seamstress_pay = payment_info['total_pay'] if payment_info else 0;

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏
    payment_details = "\n".join(
        [f"–°—É–º–º–∞: {payment['amount']} | –î–∞—Ç–∞: {payment['payment_date']}" for payment in payments]
    ) if payments else "–ù–µ—Ç –≤—ã–ø–ª–∞—Ç.";

    response_message = (
        f"–í–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã:\n{payment_details}\n\n"
        f"–°—É–º–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç: {total_seamstress_pay - total_payments}"
    );

    await callback.message.edit_text(response_message);
    await new_seamstress_menu(callback)
    await callback.answer();