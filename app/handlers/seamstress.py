from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from app.services import process_qr_code
from app.states import SeamstressStates
from app.keyboards.inline import seamstress_menu, cancel_button_seamstress, seamstress_batch, seamstress_batches_menu, seamstress_finish_batch
from app import db
import traceback
import logging
import os

router = Router()
logger = logging.getLogger(__name__)


async def show_seamstress_menu(event):
    if isinstance(event, types.Message):
        await event.answer(
            "–ú–µ–Ω—é —à–≤–µ–∏:",
            reply_markup=seamstress_menu()
        )
    elif isinstance(event, types.CallbackQuery):
        await event.message.edit_text(
            "–ú–µ–Ω—é —à–≤–µ–∏:",
            reply_markup=seamstress_menu()
        )

async def new_seamstress_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ú–µ–Ω—é —à–≤–µ–∏:",
        reply_markup=seamstress_menu()
    )

@router.callback_query(lambda c: c.data == 'cancel_seamstress')
async def cancel_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=seamstress_menu()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "seamstress_data")
async def show_seamstress_data(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with db.execute(
        """SELECT name, job
        FROM employees 
        WHERE tg_id = ?""",
        (user_id,)
    ) as cursor:
        user_data = await cursor.fetchone()
    
    if user_data:
        name, job = user_data  # –¢–µ–ø–µ—Ä—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        await callback.message.edit_text(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {name}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {job}"
        )
        await new_seamstress_menu(callback)
    else:
        await callback.message.edit_text(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        await new_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_take_batch')
async def take_batch_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SeamstressStates.waiting_for_qr)
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –ø–∞—á–∫–∏",
        reply_markup=cancel_button_seamstress()
    )
    await callback.answer()

@router.message(SeamstressStates.waiting_for_qr)
async def process_batch_qr(message: types.Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å json-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        logger.debug("Received message: %s", message.model_dump_json())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if message.photo:
            photo = message.photo[-1]
        elif message.document and message.document.mime_type.startswith('image/'):
            photo = message.document
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ!")
            return
        
        file = await message.bot.get_file(photo.file_id)
        image_data = await message.bot.download_file(file.file_path)
        
        temp_filename = f"temp_qr_{message.from_user.id}_{message.message_id}.jpg"
    
        with open(temp_filename, "wb") as f:
            f.write(image_data.getvalue())
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR
        os.remove(temp_filename)
        try:
            qr_text = await process_qr_code(image_data.read())
            print(f"Decoded QR: {qr_text}")
        except Exception as decode_error:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            await message.answer("- –§–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n- QR-–∫–æ–¥ –≤ —Ñ–æ–∫—É—Å–µ\n- –ù–µ—Ç –±–ª–∏–∫–æ–≤")
            raise decode_error
        
        batch_id = int(qr_text.split('ID:')[1].split('\n')[0].strip())
        
        # –ò—â–µ–º –ø–∞—á–∫—É –≤ –ë–î
        async with db.execute(
            """SELECT batch_id, project_nm, product_nm, color, size, quantity, parts_count 
            FROM batches 
            WHERE batch_id = ? AND seamstress_id IS NULL""",
            (batch_id,)
        ) as cursor:
            batch_data = await cursor.fetchone()
        
        if not batch_data:
            await message.answer("‚ùå –ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            await state.clear()
            await show_seamstress_menu(message)
            return
            
        await state.update_data(batch_id=batch_id)
        await state.set_state(SeamstressStates.confirm_batch)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        response = (
            "üîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞—á–∫–∞:\n\n"
            f"ID: {batch_data[0]}\n"
            f"–ü—Ä–æ–µ–∫—Ç: {batch_data[1]}\n"
            f"–ò–∑–¥–µ–ª–∏–µ: {batch_data[2]}\n"
            f"–¶–≤–µ—Ç: {batch_data[3]}\n"
            f"–†–∞–∑–º–µ—Ä: {batch_data[4]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data[5]}\n"
            f"–î–µ—Ç–∞–ª–µ–π: {batch_data[6]}\n\n"
            "–ü—Ä–∏–Ω—è—Ç—å –ø–∞—á–∫—É –≤ —Ä–∞–±–æ—Ç—É?"
        )
        
        await message.answer(
            response,
            reply_markup=seamstress_batch()
        )
        
    except Exception as e:
        logger.error("QR processing failed: %s", traceback.format_exc())
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await state.set_state(SeamstressStates.waiting_for_qr)

@router.callback_query(lambda c: c.data == 'accept_batch', SeamstressStates.confirm_batch)
async def accept_batch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        async with db.execute(
            """UPDATE batches 
            SET seamstress_id = ?, status = '—à—å–µ—Ç—Å—è', sew_start_dttm = CURRENT_TIMESTAMP
            WHERE batch_id = ?""",
            (callback.from_user.id, data['batch_id'])
        ):
            await callback.message.edit_text("‚úÖ –ü–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
            await state.clear()
            await show_seamstress_menu(callback)
            
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data == 'decline_batch', SeamstressStates.confirm_batch)
async def decline_batch(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–∞—á–∫–∏")
    await show_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_batches')
async def show_seamstress_batches(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—á–∫–∏ —à–≤–µ–∏
        async with db.execute(
            """SELECT batch_id, project_nm, product_nm, status 
            FROM batches 
            WHERE seamstress_id = ? and batches.status = '—à—å–µ—Ç—Å—è'""",
            (user_id,)
        ) as cursor:
            batches = await cursor.fetchall()
        
        if not batches:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—á–µ–∫")
            await callback.answer()
            await new_seamstress_menu(callback)
            return

        await callback.message.edit_text(
            "üì¶ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—á–∫–∏:",
            reply_markup=seamstress_batches_menu(batches)
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith('seamstress_batch_'))
async def show_batch_details(callback: types.CallbackQuery, state: FSMContext):
    try:
        batch_id = int(callback.data.split('_')[-1])
        await state.update_data(batch_id=batch_id)
        
        async with db.execute(
            """SELECT batches.batch_id, batches.project_nm, batches.product_nm, batches.color, batches.size, 
                    batches.quantity, batches.parts_count, batches.seamstress_id, batches.created_at,
                    employees.name 
            FROM batches 
            JOIN employees ON batches.cutter_id = employees.tg_id
            WHERE batches.batch_id = ? """,
            (batch_id,)
        ) as cursor:
            batch_data = await cursor.fetchone()
        
        if not batch_data:
            await callback.answer("–ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        response = (
            "üîç –î–µ—Ç–∞–ª–∏ –ø–∞—á–∫–∏:\n\n"
            f"ID: {batch_data[0]}\n"
            f"–ü—Ä–æ–µ–∫—Ç: {batch_data[1]}\n"
            f"–ò–∑–¥–µ–ª–∏–µ: {batch_data[2]}\n"
            f"–¶–≤–µ—Ç: {batch_data[3]}\n"
            f"–†–∞–∑–º–µ—Ä: {batch_data[4]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data[5]}\n"
            f"–î–µ—Ç–∞–ª–µ–π: {batch_data[6]}\n"
            f"–†–∞—Å–∫—Ä–æ–π—â–∏–∫: {batch_data[9]}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {batch_data[8]}"
        )
        
        await callback.message.edit_text(
            response,
            reply_markup=seamstress_finish_batch())
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()
        await new_seamstress_menu(callback)

@router.callback_query(lambda c: c.data == 'seamstress_finish_batch')
async def finish_batch_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        batch_id = data.get('batch_id')
        
        if not batch_id:
            await callback.answer("–û—à–∏–±–∫–∞: ID –ø–∞—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        async with db.execute(
            """UPDATE batches 
            SET status = '–ø–æ—à–∏—Ç–∞', sew_end_dttm = CURRENT_TIMESTAMP 
            WHERE batch_id = ?""",
            (batch_id,)
        ) as cursor:
            await db.fetchall(cursor)
            
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            "‚úÖ –ü–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
            reply_markup=None
        )
        await new_seamstress_menu(callback)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await new_seamstress_menu(callback)
    finally:
        await callback.answer()
        await state.clear()

@router.callback_query(lambda c: c.data == 'seamstress_cancel_finish_batch')
async def cancel_finish_batch_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await new_seamstress_menu(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'seamstress_ok')
async def close_batches_list(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()
    await new_seamstress_menu(callback)